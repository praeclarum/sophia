lu_factor (a: double[], n: int, ipvt: int[], scaleFactors: double[]) : int =
    # divide each row by its largest element, keeping track of the scaling factors
    for i = 0..<n
        largest = 0.0
        itn = i * n
        for j in 0..<n
            v = a[itn + j]
            x = v if v >= 0 else -v
            if x > largest
                largest = x
        # if all zeros, it's a singular matrix
        if largest == 0.0
            return i
        scaleFactors[i] = 1.0 / largest

    # use Crout's method; loop through the columns
    for j = 0..<n
        jtn = j * n

        # calculate upper triangular elements for this column
        for i = 0..<j
            itn = i * n
            q = a[itn + j]
            for k in 0..<i
                q -= a[itn + k] * a[k * n + j]
            a[itn + j] = q

        # calculate lower triangular elements for this column
        largest = 0
        largestRow = 0
        itn = jtn
        itnpj = itn + j
        for i = j..<n
            q = a[itnpj]
            ktnpj = j
            for k = 0..<j
                q -= a[itn + k] * a[ktnpj];
                ktnpj += n;
            a[itnpj] = q
            double x = q >= 0 ? q : -q
            if x >= largest
                largest = x;
                largestRow = i;
            itn += n;
            itnpj += n;

        # pivoting
        if j != largestRow
            ltn = largestRow * n
            for k = 0..<n
                x = a[ltn + k]
                a[ltn + k] = a[jtn + k]
                a[jtn + k] = x
            scaleFactors[largestRow] = scaleFactors[j]

        # keep track of row interchanges
        ipvt[j] = largestRow

        # avoid zeros
        if a[jtn + j] == 0.0
            a[jtn + j] = 1e-18

        if j != n - 1
            mult = 1.0 / a[jtn + j]
            for i = (j + 1)..<n
                a[i * n + j] *= mult
    -1
